# Copyright (C) garin <garin54@gmail.com> 2011
# See the included file COPYING for details.
class InlineParser
  token EM_OPEN EM_CLOSE ITALIC_OPEN ITALIC_CLOSE STRIKE_OPEN STRIKE_CLOSE LABEL_OPEN LABEL_CLOSE REFERENCE_OPEN REFERENCE_CLOSE VERB_OPEN VERB_CLOSE ERB_OPEN ERB_CLOSE HERB_OPEN FOOTNOTE_OPEN FOOTNOTE_CLOSE RUBY_OPEN RUBY_CLOSE IMAGE_OPEN IMAGE_CLOSE MANUEDO_OPEN MANUEDO_CLOSE OTHER
  options no_result_var
  rule
  content :
          | elements

  elements : elements element { val[0].push(val[1]) }
           | element          { val }

  element  : emphasis
           | italic
           | strike
           | label
           | reference
           | ruby
           | footnote
           | image
           | verb
           | erb
           | herb
           | manuedo
           | normal_strings

  # --- inline
  emphasis : EM_OPEN content EM_CLOSE { Emphasis.new(val[1]) }
  italic   : ITALIC_OPEN content ITALIC_CLOSE { Italic.new(val[1]) }
  strike   : STRIKE_OPEN content STRIKE_CLOSE { Strike.new(val[1]) }
  footnote : FOOTNOTE_OPEN content FOOTNOTE_CLOSE {
               @index[:footnote] ||= []
               @index[:footnote] << {:content => val[1] }
               Footnote.new([val[1], @index[:footnote].size])
               }

  # --- inline end

  # --- image
  image_string : OTHER
              | EM_OPEN
              | EM_CLOSE
              | ITALIC_OPEN
              | ITALIC_CLOSE
              | STRIKE_OPEN
              | STRIKE_CLOSE
              | RUBY_OPEN
              | RUBY_CLOSE
              | MANUEDO_OPEN
              | MANUEDO_CLOSE
              | ERB_OPEN
              | ERB_CLOSE
              | HERB_OPEN
              | REFERENCE_OPEN
              | REFERENCE_CLOSE
              | LABEL_OPEN
              | LABEL_CLOSE
              | FOOTNOTE_OPEN
              | FOOTNOTE_CLOSE
              | VERB_OPEN
	      | VERB_CLOSE
              | IMAGE_OPEN

  image_strings :  image_strings image_string { val.join }
                |  image_string { val[0] }
  image    : IMAGE_OPEN image_strings IMAGE_CLOSE { Image.new(val[1]) }

  # --- image end
  # --- ruby
  ruby_string : OTHER
              | EM_OPEN
              | EM_CLOSE
              | ITALIC_OPEN
              | ITALIC_CLOSE
              | STRIKE_OPEN
              | STRIKE_CLOSE
              | IMAGE_OPEN
              | IMAGE_CLOSE
              | MANUEDO_OPEN
              | MANUEDO_CLOSE
              | ERB_OPEN
              | ERB_CLOSE
              | HERB_OPEN
              | REFERENCE_OPEN
              | REFERENCE_CLOSE
              | LABEL_OPEN
              | LABEL_CLOSE
              | RUBY_OPEN
              | FOOTNOTE_OPEN
              | FOOTNOTE_CLOSE
              | VERB_OPEN
	      | VERB_CLOSE

  ruby_strings :  ruby_strings ruby_string { val.join }
               |  ruby_string { val[0] }

  ruby   : RUBY_OPEN ruby_strings RUBY_CLOSE {
                  base, text = val[1].split("|",2)
                  text ||= base
                  Ruby.new([base, text])
                }

  # --- ruby end
  # --- erb
  erb      : ERB_OPEN verb_string  ERB_CLOSE {
             e = ERB.new("<%= #{val[1]} %>")
             Plain.new(e.result) }
  herb     : HERB_OPEN verb_string  ERB_CLOSE {
             e = ERB.new("<% #{val[1]} %>")
             Plain.new(e.result) }
  # --- erb end
  # --- manuedo
  manuedo  : MANUEDO_OPEN content MANUEDO_CLOSE { Manuedo.new(val[1]) }

  # --- manuedo end

  # --- label
  label_string : OTHER { val[0] }


  label_strings :  label_strings label_string { val.join }
                |  label_string { val[0] }

  label : LABEL_OPEN label_strings LABEL_CLOSE {
          label, title = val[1].split("|",2)
          title ||= label
          @index[:label] ||= []
          @index[:label] << {:title => title }
          Label.new([label.to_code, title, @index[:label].size])
          }

  # --- labe end
  # --- reference : start
  reference_string : OTHER { val[0] }

  reference_strings :  reference_strings reference_string { val.join }
                    |  reference_string { val[0] }

  reference   : REFERENCE_OPEN reference_strings REFERENCE_CLOSE {
                  title, uri = val[1].split("|",2)
                  uri ||= title
                  uri = "#" + uri.to_code if uri.gsub(/^\s*https*:\/\//,"") == uri
                  Reference.new([title, uri])
                }
  # --- reference : end
  # --- verb
  verb_string : OTHER
              | EM_OPEN
              | EM_CLOSE
              | ITALIC_OPEN
              | ITALIC_CLOSE
              | STRIKE_OPEN
              | STRIKE_CLOSE
              | IMAGE_OPEN
              | IMAGE_CLOSE
              | MANUEDO_OPEN
              | MANUEDO_CLOSE
              | ERB_OPEN
              | ERB_CLOSE
              | HERB_OPEN
              | REFERENCE_OPEN
              | REFERENCE_CLOSE
              | LABEL_OPEN
              | LABEL_CLOSE
              | RUBY_OPEN
              | RUBY_CLOSE
              | FOOTNOTE_OPEN
              | FOOTNOTE_CLOSE
              | VERB_OPEN

  verb_strings : verb_string
               | verb_strings verb_string { val }

  verb : VERB_OPEN verb_strings VERB_CLOSE {  Verb.new(val[1])}

  # --- verb end
  # --- normal
  normal_strings : normal_string { Plain.new(val[0]) }
                 | normal_strings normal_string {  Plain.new([val[0].contents, val[1]]) }

  normal_string : OTHER { val[0] }
  # --- normal end

---- inner
include ParserUtility

EM_OPEN = '((*'
EM_OPEN_RE = /\A#{Regexp.quote(EM_OPEN)}/
EM_CLOSE = '*))'
EM_CLOSE_RE = /\A#{Regexp.quote(EM_CLOSE)}/

ITALIC_OPEN = '((_'
ITALIC_OPEN_RE = /\A#{Regexp.quote(ITALIC_OPEN)}/
ITALIC_CLOSE = '_))'
ITALIC_CLOSE_RE = /\A#{Regexp.quote(ITALIC_CLOSE)}/

STRIKE_OPEN = '((-'
STRIKE_OPEN_RE = /\A#{Regexp.quote(STRIKE_OPEN)}/
STRIKE_CLOSE = '-))'
STRIKE_CLOSE_RE = /\A#{Regexp.quote(STRIKE_CLOSE)}/

RUBY_OPEN = '((^'
RUBY_OPEN_RE = /\A#{Regexp.quote(RUBY_OPEN)}/
RUBY_CLOSE = '^))'
RUBY_CLOSE_RE = /\A#{Regexp.quote(RUBY_CLOSE)}/

FOOTNOTE_OPEN = '((['
FOOTNOTE_OPEN_RE = /\A#{Regexp.quote(FOOTNOTE_OPEN)}/
FOOTNOTE_CLOSE = ']))'
FOOTNOTE_CLOSE_RE = /\A#{Regexp.quote(FOOTNOTE_CLOSE)}/

IMAGE_OPEN = '(($'
IMAGE_OPEN_RE = /\A#{Regexp.quote(IMAGE_OPEN)}/
IMAGE_CLOSE = '$))'
IMAGE_CLOSE_RE = /\A#{Regexp.quote(IMAGE_CLOSE)}/

LABEL_OPEN = '((>'
LABEL_OPEN_RE = /\A#{Regexp.quote(LABEL_OPEN)}/
LABEL_CLOSE = '<))'
LABEL_CLOSE_RE = /\A#{Regexp.quote(LABEL_CLOSE)}/

LABEL_HTML_OPEN = '((&gt;'
LABEL_HTML_OPEN_RE = /\A#{Regexp.quote(LABEL_HTML_OPEN)}/
LABEL_HTML_CLOSE = '&lt;))'
LABEL_HTML_CLOSE_RE = /\A#{Regexp.quote(LABEL_HTML_CLOSE)}/

REFERENCE_OPEN = '((<'
REFERENCE_OPEN_RE = /\A#{Regexp.quote(REFERENCE_OPEN)}/
REFERENCE_CLOSE = '>))'
REFERENCE_CLOSE_RE = /\A#{Regexp.quote(REFERENCE_CLOSE)}/

REFERENCE_HTML_OPEN = '((<'
REFERENCE_HTML_OPEN_RE = /\A#{Regexp.quote(REFERENCE_HTML_OPEN)}/
REFERENCE_HTML_CLOSE = '>))'
REFERENCE_HTML_CLOSE_RE = /\A#{Regexp.quote(REFERENCE_HTML_CLOSE)}/

VERB_OPEN = "(('"
VERB_OPEN_RE = /\A#{Regexp.quote(VERB_OPEN)}/
VERB_CLOSE = "'))"
VERB_CLOSE_RE = /\A#{Regexp.quote(VERB_CLOSE)}/

MANUEDO_OPEN = "((/"
MANUEDO_OPEN_RE = /\A#{Regexp.quote(MANUEDO_OPEN)}/
MANUEDO_CLOSE = "/))"
MANUEDO_CLOSE_RE = /\A#{Regexp.quote(MANUEDO_CLOSE)}/

ERB_OPEN = "<%="
ERB_OPEN_RE = /\A#{Regexp.quote(ERB_OPEN)}/
ERB_CLOSE = "%>"
ERB_CLOSE_RE = /\A#{Regexp.quote(ERB_CLOSE)}/

HERB_OPEN = "<%"
HERB_OPEN_RE = /\A#{Regexp.quote(HERB_OPEN)}/

# URL = "URL:"
# URL_RE = /\A#{Regexp.quote(URL)}/

#other_re_mode = Regexp::EXTENDED
other_re_mode = Regexp::MULTILINE
OTHER_RE = Regexp.new(
                      "\\A.+?(?=#{Regexp.quote(EM_OPEN)}|#{Regexp.quote(EM_CLOSE)}|#{Regexp.quote(ITALIC_OPEN)}|#{Regexp.quote(ITALIC_CLOSE)}|#{Regexp.quote(STRIKE_OPEN)}|#{Regexp.quote(STRIKE_CLOSE)}|#{Regexp.quote(FOOTNOTE_OPEN)}|#{Regexp.quote(FOOTNOTE_CLOSE)}|#{Regexp.quote(RUBY_OPEN)}|#{Regexp.quote(RUBY_CLOSE)}|#{Regexp.quote(IMAGE_OPEN)}|#{Regexp.quote(IMAGE_CLOSE)}|#{Regexp.quote(LABEL_OPEN)}|#{Regexp.quote(LABEL_CLOSE)}|#{Regexp.quote(LABEL_HTML_OPEN)}|#{Regexp.quote(LABEL_HTML_CLOSE)}|#{Regexp.quote(REFERENCE_OPEN)}|#{Regexp.quote(REFERENCE_CLOSE)}|#{Regexp.quote(REFERENCE_HTML_OPEN)}|#{Regexp.quote(REFERENCE_HTML_CLOSE)}|#{Regexp.quote(MANUEDO_OPEN)}|#{Regexp.quote(MANUEDO_CLOSE)}|#{Regexp.quote(VERB_OPEN)}|#{Regexp.quote(VERB_CLOSE)}|#{Regexp.quote(ERB_OPEN)}|#{Regexp.quote(ERB_CLOSE)}|#{Regexp.quote(HERB_OPEN)})", other_re_mode)

def parse(src)
  @src = StringScanner.new(Array(src).join)
  @pre = ""
  @@yydebug = false
  @view_token_type = false
  do_parse
end
def initialize
  @index = {}
end
attr_reader :index

def next_token
  return [false, false] if @src.eos?
  if ret = @src.scan(EM_OPEN_RE)
    puts "i: EM_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:EM_OPEN, ret]
  elsif ret = @src.scan(EM_CLOSE_RE)
    puts "i: EM_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:EM_CLOSE, ret]
  elsif ret = @src.scan(ITALIC_OPEN_RE)
    puts "i: ITALIC_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:ITALIC_OPEN, ret]
  elsif ret = @src.scan(ITALIC_CLOSE_RE)
    puts "i: ITALIC_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:ITALIC_CLOSE, ret]
  elsif ret = @src.scan(STRIKE_OPEN_RE)
    @pre << ret
    puts "i: STRIKE_OPEN: #{ret}" if @view_token_type
    [:STRIKE_OPEN, ret]
  elsif ret = @src.scan(STRIKE_CLOSE_RE)
    @pre << ret
    puts "i: STRIKE_CLOSE: #{ret}" if @view_token_type
    [:STRIKE_CLOSE, ret]
  elsif ret = @src.scan(LABEL_OPEN_RE)
    @pre << ret
    puts "i: LABEL_OPEN: #{ret}" if @view_token_type
    [:LABEL_OPEN, ret]
  elsif ret = @src.scan(LABEL_CLOSE_RE)
    puts "i: LABEL_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:LABEL_CLOSE, ret]
  elsif ret = @src.scan(LABEL_HTML_OPEN_RE)
    @pre << ret
    puts "i: LABEL_OPEN: #{ret}" if @view_token_type
    [:LABEL_OPEN, ret]
  elsif ret = @src.scan(LABEL_HTML_CLOSE_RE)
    puts "i: LABEL_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:LABEL_CLOSE, ret]
  elsif ret = @src.scan(REFERENCE_OPEN_RE)
    puts "i: REFERENCE_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:REFERENCE_OPEN, ret]
  elsif ret = @src.scan(REFERENCE_CLOSE_RE)
    puts "i: REFERENCE_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:REFERENCE_CLOSE, ret]
  elsif ret = @src.scan(REFERENCE_HTML_OPEN_RE)
    puts "i: REFERENCE_HTML_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:REFERENCE_OPEN, ret]
  elsif ret = @src.scan(REFERENCE_HTML_CLOSE_RE)
    puts "i: REFERENCE_HTML_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:REFERENCE_CLOSE, ret]
  elsif ret = @src.scan(VERB_OPEN_RE)
    puts "i: VERB_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:VERB_OPEN, ret]
  elsif ret = @src.scan(VERB_CLOSE_RE)
    puts "i: VERB_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:VERB_CLOSE, ret]
  elsif ret = @src.scan(RUBY_OPEN_RE)
    puts "i: RUBY_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:RUBY_OPEN, ret]
  elsif ret = @src.scan(RUBY_CLOSE_RE)
    puts "i: RUBY_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:RUBY_CLOSE, ret]
  elsif ret = @src.scan(FOOTNOTE_OPEN_RE)
    puts "i: FOOTNOTE_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:FOOTNOTE_OPEN, ret]
  elsif ret = @src.scan(FOOTNOTE_CLOSE_RE)
    puts "i: FOOTNOTE_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:FOOTNOTE_CLOSE, ret]
  elsif ret = @src.scan(IMAGE_OPEN_RE)
    puts "i: IMAGE_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:IMAGE_OPEN, ret]
  elsif ret = @src.scan(IMAGE_CLOSE_RE)
    puts "i: IMAGE_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:IMAGE_CLOSE, ret]
  elsif ret = @src.scan(MANUEDO_OPEN_RE)
    puts "i: MANUEDO_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:MANUEDO_OPEN, ret]
  elsif ret = @src.scan(MANUEDO_CLOSE_RE)
    puts "i: MANUED_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:MANUEDO_CLOSE, ret]
  elsif ret = @src.scan(ERB_OPEN_RE)
    puts "i: ERB_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:ERB_OPEN, ret]
  elsif ret = @src.scan(ERB_CLOSE_RE)
    puts "i: ERB_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:ERB_CLOSE, ret]
  elsif ret = @src.scan(HERB_OPEN_RE)
    puts "i: HERB_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:HERB_OPEN, ret]
  elsif ret = @src.scan(OTHER_RE)
    puts "i: OTHER_RE: #{ret}" if @view_token_type
    @pre << ret
    [:OTHER, ret]
  else
    puts "i: OTHER_RE(else): #{ret}" if @view_token_type
    ret = @src.rest
    @pre << ret
    @src.terminate
    [:OTHER, ret]
  end
end

---- header
require "parserutility"
require 'strscan'
require 'erb'
require 'rafelement'

module Raf
---- footer
  if __FILE__ == $0
    raf = InlineParser.new
    src = $stdin.readline
    nodes = raf.parse(src)
    puts "----- output -----"
    nodes.each do |n|
      puts n.apply
    end
  end
end # end of module Raf
