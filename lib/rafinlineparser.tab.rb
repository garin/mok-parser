#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.10
# from Racc grammer file "".
#

require 'racc/parser.rb'

require "parserutility"
require 'strscan'
require 'erb'
require 'rafelement'

module Raf
class InlineParser < Racc::Parser

module_eval(<<'...end rafinlineparser.ry/module_eval...', 'rafinlineparser.ry', 203)
include ParserUtility

EM_OPEN = '((*'
EM_OPEN_RE = /\A#{Regexp.quote(EM_OPEN)}/
EM_CLOSE = '*))'
EM_CLOSE_RE = /\A#{Regexp.quote(EM_CLOSE)}/

ITALIC_OPEN = '((_'
ITALIC_OPEN_RE = /\A#{Regexp.quote(ITALIC_OPEN)}/
ITALIC_CLOSE = '_))'
ITALIC_CLOSE_RE = /\A#{Regexp.quote(ITALIC_CLOSE)}/

STRIKE_OPEN = '((-'
STRIKE_OPEN_RE = /\A#{Regexp.quote(STRIKE_OPEN)}/
STRIKE_CLOSE = '-))'
STRIKE_CLOSE_RE = /\A#{Regexp.quote(STRIKE_CLOSE)}/

RUBY_OPEN = '((^'
RUBY_OPEN_RE = /\A#{Regexp.quote(RUBY_OPEN)}/
RUBY_CLOSE = '^))'
RUBY_CLOSE_RE = /\A#{Regexp.quote(RUBY_CLOSE)}/

FOOTNOTE_OPEN = '((['
FOOTNOTE_OPEN_RE = /\A#{Regexp.quote(FOOTNOTE_OPEN)}/
FOOTNOTE_CLOSE = ']))'
FOOTNOTE_CLOSE_RE = /\A#{Regexp.quote(FOOTNOTE_CLOSE)}/

IMAGE_OPEN = '(($'
IMAGE_OPEN_RE = /\A#{Regexp.quote(IMAGE_OPEN)}/
IMAGE_CLOSE = '$))'
IMAGE_CLOSE_RE = /\A#{Regexp.quote(IMAGE_CLOSE)}/


LABEL_OPEN = '((>'
LABEL_OPEN_RE = /\A#{Regexp.quote(LABEL_OPEN)}/
LABEL_CLOSE = '<))'
LABEL_CLOSE_RE = /\A#{Regexp.quote(LABEL_CLOSE)}/

LABEL_HTML_OPEN = '((&gt;'
LABEL_HTML_OPEN_RE = /\A#{Regexp.quote(LABEL_HTML_OPEN)}/
LABEL_HTML_CLOSE = '&lt;))'
LABEL_HTML_CLOSE_RE = /\A#{Regexp.quote(LABEL_HTML_CLOSE)}/


REFERENCE_OPEN = '((<'
REFERENCE_OPEN_RE = /\A#{Regexp.quote(REFERENCE_OPEN)}/
REFERENCE_CLOSE = '>))'
REFERENCE_CLOSE_RE = /\A#{Regexp.quote(REFERENCE_CLOSE)}/

REFERENCE_HTML_OPEN = '((<'
REFERENCE_HTML_OPEN_RE = /\A#{Regexp.quote(REFERENCE_HTML_OPEN)}/
REFERENCE_HTML_CLOSE = '>))'
REFERENCE_HTML_CLOSE_RE = /\A#{Regexp.quote(REFERENCE_HTML_CLOSE)}/

VERB_OPEN = "(('"
VERB_OPEN_RE = /\A#{Regexp.quote(VERB_OPEN)}/
VERB_CLOSE = "'))"
VERB_CLOSE_RE = /\A#{Regexp.quote(VERB_CLOSE)}/

MANUEDO_OPEN = "((/"
MANUEDO_OPEN_RE = /\A#{Regexp.quote(MANUEDO_OPEN)}/
MANUEDO_CLOSE = "/))"
MANUEDO_CLOSE_RE = /\A#{Regexp.quote(MANUEDO_CLOSE)}/

ERB_OPEN = "<%="
ERB_OPEN_RE = /\A#{Regexp.quote(ERB_OPEN)}/
ERB_CLOSE = "%>"
ERB_CLOSE_RE = /\A#{Regexp.quote(ERB_CLOSE)}/

BAR = "|"
BAR_RE = /\A#{Regexp.quote(BAR)}/
QUOTE = '"'
QUOTE_RE = /\A#{Regexp.quote(QUOTE)}/
SLASH = "/"
SLASH_RE = /\A#{Regexp.quote(SLASH)}/
BACK_SLASH = "\\"
BACK_SLASH_RE = /\A#{Regexp.quote(BACK_SLASH)}/
# URL = "URL:"
# URL_RE = /\A#{Regexp.quote(URL)}/

#other_re_mode = Regexp::EXTENDED
other_re_mode = Regexp::MULTILINE
OTHER_RE = Regexp.new(
                      "\\A.+?(?=#{Regexp.quote(EM_OPEN)}|#{Regexp.quote(EM_CLOSE)}|#{Regexp.quote(ITALIC_OPEN)}|#{Regexp.quote(ITALIC_CLOSE)}|#{Regexp.quote(STRIKE_OPEN)}|#{Regexp.quote(STRIKE_CLOSE)}|#{Regexp.quote(FOOTNOTE_OPEN)}|#{Regexp.quote(FOOTNOTE_CLOSE)}|#{Regexp.quote(RUBY_OPEN)}|#{Regexp.quote(RUBY_CLOSE)}|#{Regexp.quote(IMAGE_OPEN)}|#{Regexp.quote(IMAGE_CLOSE)}|#{Regexp.quote(LABEL_OPEN)}|#{Regexp.quote(LABEL_CLOSE)}|#{Regexp.quote(LABEL_HTML_OPEN)}|#{Regexp.quote(LABEL_HTML_CLOSE)}|#{Regexp.quote(REFERENCE_OPEN)}|#{Regexp.quote(REFERENCE_CLOSE)}|#{Regexp.quote(REFERENCE_HTML_OPEN)}|#{Regexp.quote(REFERENCE_HTML_CLOSE)}|#{Regexp.quote(MANUEDO_OPEN)}|#{Regexp.quote(MANUEDO_CLOSE)}|#{Regexp.quote(VERB_OPEN)}|#{Regexp.quote(VERB_CLOSE)}|#{Regexp.quote(ERB_OPEN)}|#{Regexp.quote(ERB_CLOSE)}|#{Regexp.quote(BAR)}|#{Regexp.quote(QUOTE)}|#{Regexp.quote(SLASH)}|#{Regexp.quote(BACK_SLASH)})", other_re_mode)


def parse(src)
  @src = StringScanner.new(Array(src).join)
  @pre = ""
  @@yydebug = false
  @view_token_type = false
  do_parse
end
def initialize
  @index = {}
end
attr_reader :index

def next_token
  return [false, false] if @src.eos?
  if ret = @src.scan(EM_OPEN_RE)
    puts "i: EM_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:EM_OPEN, ret]
  elsif ret = @src.scan(EM_CLOSE_RE)
    puts "i: EM_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:EM_CLOSE, ret]
  elsif ret = @src.scan(ITALIC_OPEN_RE)
    puts "i: ITALIC_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:ITALIC_OPEN, ret]
  elsif ret = @src.scan(ITALIC_CLOSE_RE)
    puts "i: ITALIC_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:ITALIC_CLOSE, ret]
  elsif ret = @src.scan(STRIKE_OPEN_RE)
    @pre << ret
    puts "i: STRIKE_OPEN: #{ret}" if @view_token_type
    [:STRIKE_OPEN, ret]
  elsif ret = @src.scan(STRIKE_CLOSE_RE)
    @pre << ret
    puts "i: STRIKE_CLOSE: #{ret}" if @view_token_type
    [:STRIKE_CLOSE, ret]
  elsif ret = @src.scan(LABEL_OPEN_RE)
    @pre << ret
    puts "i: LABEL_OPEN: #{ret}" if @view_token_type
    [:LABEL_OPEN, ret]
  elsif ret = @src.scan(LABEL_CLOSE_RE)
    puts "i: LABEL_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:LABEL_CLOSE, ret]
  elsif ret = @src.scan(LABEL_HTML_OPEN_RE)
    @pre << ret
    puts "i: LABEL_OPEN: #{ret}" if @view_token_type
    [:LABEL_OPEN, ret]
  elsif ret = @src.scan(LABEL_HTML_CLOSE_RE)
    puts "i: LABEL_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:LABEL_CLOSE, ret]
  elsif ret = @src.scan(REFERENCE_OPEN_RE)
    puts "i: REFERENCE_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:REFERENCE_OPEN, ret]
  elsif ret = @src.scan(REFERENCE_CLOSE_RE)
    puts "i: REFERENCE_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:REFERENCE_CLOSE, ret]
  elsif ret = @src.scan(REFERENCE_HTML_OPEN_RE)
    puts "i: REFERENCE_HTML_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:REFERENCE_OPEN, ret]
  elsif ret = @src.scan(REFERENCE_HTML_CLOSE_RE)
    puts "i: REFERENCE_HTML_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:REFERENCE_CLOSE, ret]
  elsif ret = @src.scan(VERB_OPEN_RE)
    puts "i: VERB_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:VERB_OPEN, ret]
  elsif ret = @src.scan(VERB_CLOSE_RE)
    puts "i: VERB_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:VERB_CLOSE, ret]
  elsif ret = @src.scan(RUBY_OPEN_RE)
    puts "i: RUBY_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:RUBY_OPEN, ret]
  elsif ret = @src.scan(RUBY_CLOSE_RE)
    puts "i: RUBY_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:RUBY_CLOSE, ret]
  elsif ret = @src.scan(FOOTNOTE_OPEN_RE)
    puts "i: FOOTNOTE_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:FOOTNOTE_OPEN, ret]
  elsif ret = @src.scan(FOOTNOTE_CLOSE_RE)
    puts "i: FOOTNOTE_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:FOOTNOTE_CLOSE, ret]
  elsif ret = @src.scan(IMAGE_OPEN_RE)
    puts "i: IMAGE_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:IMAGE_OPEN, ret]
  elsif ret = @src.scan(IMAGE_CLOSE_RE)
    puts "i: IMAGE_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:IMAGE_CLOSE, ret]
  elsif ret = @src.scan(MANUEDO_OPEN_RE)
    puts "i: MANUEDO_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:MANUEDO_OPEN, ret]
  elsif ret = @src.scan(MANUEDO_CLOSE_RE)
    puts "i: MANUED_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:MANUEDO_CLOSE, ret]
  elsif ret = @src.scan(ERB_OPEN_RE)
    puts "i: ERB_OPEN: #{ret}" if @view_token_type
    @pre << ret
    [:ERB_OPEN, ret]
  elsif ret = @src.scan(ERB_CLOSE_RE)
    puts "i: ERB_CLOSE: #{ret}" if @view_token_type
    @pre << ret
    [:ERB_CLOSE, ret]
  elsif ret = @src.scan(BAR_RE)
    puts "i: BAR: #{ret}" if @view_token_type
    @pre << ret
    [:BAR, ret]
  elsif ret = @src.scan(QUOTE_RE)
    puts "i: QUOTE: #{ret}" if @view_token_type
    @pre << ret
    [:QUOTE, ret]
  elsif ret = @src.scan(SLASH_RE)
    puts "i: SLASH: #{ret}" if @view_token_type
    @pre << ret
    [:SLASH, ret]
  elsif ret = @src.scan(BACK_SLASH_RE)
    puts "i: BACK_SLASH: #{ret}" if @view_token_type
    @pre << ret
    [:BACK_SLASH, ret]
  elsif ret = @src.scan(OTHER_RE)
    puts "i: OTHER_RE: #{ret}" if @view_token_type
    @pre << ret
    [:OTHER, ret]
  else
    puts "i: OTHER_RE(else): #{ret}" if @view_token_type
    ret = @src.rest
    @pre << ret
    @src.terminate
    [:OTHER, ret]
  end
end

...end rafinlineparser.ry/module_eval...
##### State transition tables begin ###

racc_action_table = [
    16,   144,    17,   143,    18,    33,    24,   149,    25,   150,
    26,   142,    22,   141,    19,   140,    21,   nil,    20,   nil,
    23,   nil,    30,    29,    31,    32,    28,    73,    74,    75,
    76,    77,    78,    87,    88,    85,    86,    92,    93,    83,
    84,    90,    91,    89,   148,    79,    80,    81,    82,    70,
    69,    71,    72,    68,    16,   nil,    17,   nil,    18,   nil,
    24,   nil,    25,   nil,    26,   nil,    22,   nil,    19,   nil,
    21,   nil,    20,   nil,    23,   nil,    30,    29,    31,    32,
    28,    45,    46,    47,    48,    49,    50,    59,    60,    57,
    58,    63,    64,    55,    56,    61,    62,    51,    52,    65,
   146,    53,    54,    42,    41,    43,    44,    40,    16,   nil,
    17,   nil,    18,   nil,    24,   nil,    25,   nil,    26,   nil,
    22,   nil,    19,   nil,    21,   nil,    20,   nil,    23,   nil,
    30,    29,    31,    32,    28,    16,   nil,    17,   nil,    18,
   nil,    24,   nil,    25,   nil,    26,   nil,    22,   nil,    19,
   nil,    21,   nil,    20,   nil,    23,   nil,    30,    29,    31,
    32,    28,    16,   nil,    17,   nil,    18,   nil,    24,   nil,
    25,   nil,    26,   nil,    22,   nil,    19,   nil,    21,   nil,
    20,   nil,    23,   nil,    30,    29,    31,    32,    28,    16,
   nil,    17,   nil,    18,   nil,    24,   nil,    25,   nil,    26,
   nil,    22,   nil,    19,   nil,    21,   nil,    20,   nil,    23,
   nil,    30,    29,    31,    32,    28,    45,    46,    47,    48,
    49,    50,    59,    60,    57,    58,    63,    64,    55,    56,
    61,    62,    51,    52,    65,   nil,    53,    54,    42,    41,
    43,    44,    40,    73,    74,    75,    76,    77,    78,    87,
    88,    85,    86,    92,    93,    83,    84,    90,    91,    89,
   nil,    79,    80,    81,    82,    70,    69,    71,    72,    68,
   102,   103,   104,   105,   106,   107,   116,   117,   114,   115,
   122,   nil,   112,   113,   120,   121,   118,   119,   108,   109,
   110,   111,    99,    98,   100,   101,    97,    16,   nil,    17,
   nil,    18,   nil,    24,   nil,    25,   nil,    26,   nil,    22,
   nil,    19,   nil,    21,   nil,    20,   nil,    23,   nil,    30,
    29,    31,    32,    28,   102,   103,   104,   105,   106,   107,
   116,   117,   114,   115,   122,   nil,   112,   113,   120,   121,
   118,   119,   108,   109,   110,   111,    99,    98,   100,   101,
    97,   102,   103,   104,   105,   106,   107,   116,   117,   114,
   115,   122,   156,   112,   113,   120,   121,   118,   119,   108,
   109,   110,   111,    99,    98,   100,   101,    97,   152,   133,
   132,   134,   135,   131,   nil,   154,   126,   125,   127,   128,
   124,   nil,   nil,   126,   125,   127,   128,   124,   133,   132,
   134,   135,   131,    30,    29,    31,    32,    28 ]

racc_action_check = [
     0,    39,     0,    38,     0,     1,     0,    96,     0,   123,
     0,    37,     0,    36,     0,    33,     0,   nil,     0,   nil,
     0,   nil,     0,     0,     0,     0,     0,    94,    94,    94,
    94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
    94,    94,    94,    94,    94,    94,    94,    94,    94,    94,
    94,    94,    94,    94,     2,   nil,     2,   nil,     2,   nil,
     2,   nil,     2,   nil,     2,   nil,     2,   nil,     2,   nil,
     2,   nil,     2,   nil,     2,   nil,     2,     2,     2,     2,
     2,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    66,    66,    66,    66,    66,    16,   nil,
    16,   nil,    16,   nil,    16,   nil,    16,   nil,    16,   nil,
    16,   nil,    16,   nil,    16,   nil,    16,   nil,    16,   nil,
    16,    16,    16,    16,    16,    17,   nil,    17,   nil,    17,
   nil,    17,   nil,    17,   nil,    17,   nil,    17,   nil,    17,
   nil,    17,   nil,    17,   nil,    17,   nil,    17,    17,    17,
    17,    17,    18,   nil,    18,   nil,    18,   nil,    18,   nil,
    18,   nil,    18,   nil,    18,   nil,    18,   nil,    18,   nil,
    18,   nil,    18,   nil,    18,    18,    18,    18,    18,    19,
   nil,    19,   nil,    19,   nil,    19,   nil,    19,   nil,    19,
   nil,    19,   nil,    19,   nil,    19,   nil,    19,   nil,    19,
   nil,    19,    19,    19,    19,    19,    20,    20,    20,    20,
    20,    20,    20,    20,    20,    20,    20,    20,    20,    20,
    20,    20,    20,    20,    20,   nil,    20,    20,    20,    20,
    20,    20,    20,    21,    21,    21,    21,    21,    21,    21,
    21,    21,    21,    21,    21,    21,    21,    21,    21,    21,
   nil,    21,    21,    21,    21,    21,    21,    21,    21,    21,
    22,    22,    22,    22,    22,    22,    22,    22,    22,    22,
    22,   nil,    22,    22,    22,    22,    22,    22,    22,    22,
    22,    22,    22,    22,    22,    22,    22,    23,   nil,    23,
   nil,    23,   nil,    23,   nil,    23,   nil,    23,   nil,    23,
   nil,    23,   nil,    23,   nil,    23,   nil,    23,   nil,    23,
    23,    23,    23,    23,    26,    26,    26,    26,    26,    26,
    26,    26,    26,    26,    26,   nil,    26,    26,    26,    26,
    26,    26,    26,    26,    26,    26,    26,    26,    26,    26,
    26,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   129,    25,
    25,    25,    25,    25,   nil,   136,    24,    24,    24,    24,
    24,   nil,   nil,   129,   129,   129,   129,   129,   136,   136,
   136,   136,   136,    15,    15,    15,    15,    15 ]

racc_action_pointer = [
    -2,     5,    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   379,   106,   133,   160,   187,
   214,   241,   268,   295,   362,   355,   322,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,    10,     6,    -4,   -16,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    79,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    25,   nil,    -8,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -14,   nil,   nil,   nil,   nil,   nil,   369,
   nil,   nil,   nil,   nil,   nil,   nil,   374,   nil,   nil,   349,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -133,    -2,    -4,    -5,    -6,    -7,    -8,    -9,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,    -1,    -1,    -1,    -1,
  -133,  -133,  -133,    -1,  -133,  -133,  -133,  -126,  -128,  -129,
  -130,  -131,  -132,  -133,    -3,  -127,  -133,  -133,  -133,  -133,
   -21,   -22,   -23,   -24,   -25,   -26,   -27,   -28,   -29,   -30,
   -31,   -32,   -33,   -34,   -35,   -36,   -37,   -38,   -39,   -40,
   -41,   -42,   -43,   -44,   -45,   -46,  -133,   -48,   -50,   -51,
   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,   -60,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,  -133,   -77,  -133,   -97,   -98,   -99,
  -100,  -101,  -102,  -103,  -104,  -105,  -106,  -107,  -108,  -109,
  -110,  -111,  -112,  -113,  -114,  -115,  -116,  -117,  -118,  -119,
  -120,  -121,  -122,  -133,   -81,   -82,   -83,   -84,   -85,  -133,
   -87,   -89,   -90,   -91,   -92,   -93,  -133,   -95,  -123,  -133,
   157,   -17,   -18,   -19,   -20,   -47,   -49,   -76,   -78,   -79,
   -80,   -86,   -88,   -94,   -96,  -124,  -125 ]

racc_goto_table = [
    96,   137,   130,    95,   138,    67,     1,    94,    66,   129,
    34,   136,   139,    35,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    36,    37,    38,    39,   nil,   nil,   nil,   123,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   145,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   147,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   151,   nil,   nil,
   nil,   nil,   153,   nil,   nil,   nil,   nil,   155 ]

racc_goto_check = [
    20,    23,    21,    18,    20,    16,     1,    19,    17,    22,
     3,    24,    25,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     1,     1,     1,     1,   nil,   nil,   nil,     1,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    18,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,   nil,    23,   nil,   nil,   nil,   nil,    20 ]

racc_goto_pointer = [
   nil,     6,   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   -15,   -12,   -18,   -14,
   -22,   -22,   -15,   -24,   -14,   -14,    -2 ]

racc_goto_default = [
   nil,   nil,     2,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    27 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 30, :_reduce_none,
  1, 30, :_reduce_none,
  2, 31, :_reduce_3,
  1, 31, :_reduce_4,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  3, 33, :_reduce_17,
  3, 34, :_reduce_18,
  3, 35, :_reduce_19,
  3, 39, :_reduce_20,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  1, 45, :_reduce_none,
  2, 46, :_reduce_47,
  1, 46, :_reduce_48,
  3, 40, :_reduce_49,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  1, 47, :_reduce_none,
  2, 48, :_reduce_76,
  1, 48, :_reduce_77,
  3, 38, :_reduce_78,
  3, 42, :_reduce_79,
  3, 43, :_reduce_80,
  1, 50, :_reduce_81,
  1, 50, :_reduce_82,
  1, 50, :_reduce_83,
  1, 50, :_reduce_84,
  1, 50, :_reduce_85,
  2, 51, :_reduce_86,
  1, 51, :_reduce_87,
  3, 36, :_reduce_88,
  1, 52, :_reduce_89,
  1, 52, :_reduce_90,
  1, 52, :_reduce_91,
  1, 52, :_reduce_92,
  1, 52, :_reduce_93,
  2, 53, :_reduce_94,
  1, 53, :_reduce_95,
  3, 37, :_reduce_96,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 49, :_reduce_none,
  1, 54, :_reduce_none,
  2, 54, :_reduce_124,
  3, 41, :_reduce_125,
  1, 44, :_reduce_126,
  2, 44, :_reduce_127,
  1, 55, :_reduce_128,
  1, 55, :_reduce_129,
  1, 55, :_reduce_130,
  1, 55, :_reduce_131,
  1, 55, :_reduce_132 ]

racc_reduce_n = 133

racc_shift_n = 157

racc_token_table = {
  false => 0,
  :error => 1,
  :EM_OPEN => 2,
  :EM_CLOSE => 3,
  :ITALIC_OPEN => 4,
  :ITALIC_CLOSE => 5,
  :STRIKE_OPEN => 6,
  :STRIKE_CLOSE => 7,
  :LABEL_OPEN => 8,
  :LABEL_CLOSE => 9,
  :REFERENCE_OPEN => 10,
  :REFERENCE_CLOSE => 11,
  :VERB_OPEN => 12,
  :VERB_CLOSE => 13,
  :ERB_OPEN => 14,
  :ERB_CLOSE => 15,
  :FOOTNOTE_OPEN => 16,
  :FOOTNOTE_CLOSE => 17,
  :RUBY_OPEN => 18,
  :RUBY_CLOSE => 19,
  :IMAGE_OPEN => 20,
  :IMAGE_CLOSE => 21,
  :MANUEDO_OPEN => 22,
  :MANUEDO_CLOSE => 23,
  :BAR => 24,
  :QUOTE => 25,
  :SLASH => 26,
  :BACK_SLASH => 27,
  :OTHER => 28 }

racc_nt_base = 29

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EM_OPEN",
  "EM_CLOSE",
  "ITALIC_OPEN",
  "ITALIC_CLOSE",
  "STRIKE_OPEN",
  "STRIKE_CLOSE",
  "LABEL_OPEN",
  "LABEL_CLOSE",
  "REFERENCE_OPEN",
  "REFERENCE_CLOSE",
  "VERB_OPEN",
  "VERB_CLOSE",
  "ERB_OPEN",
  "ERB_CLOSE",
  "FOOTNOTE_OPEN",
  "FOOTNOTE_CLOSE",
  "RUBY_OPEN",
  "RUBY_CLOSE",
  "IMAGE_OPEN",
  "IMAGE_CLOSE",
  "MANUEDO_OPEN",
  "MANUEDO_CLOSE",
  "BAR",
  "QUOTE",
  "SLASH",
  "BACK_SLASH",
  "OTHER",
  "$start",
  "content",
  "elements",
  "element",
  "emphasis",
  "italic",
  "strike",
  "label",
  "reference",
  "ruby",
  "footnote",
  "image",
  "verb",
  "erb",
  "manuedo",
  "normal_strings",
  "image_string",
  "image_strings",
  "ruby_string",
  "ruby_strings",
  "verb_string",
  "label_string",
  "label_strings",
  "reference_string",
  "reference_strings",
  "verb_strings",
  "normal_string" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'rafinlineparser.ry', 9)
  def _reduce_3(val, _values)
     val[0].push(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 10)
  def _reduce_4(val, _values)
     val 
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'rafinlineparser.ry', 27)
  def _reduce_17(val, _values)
     Emphasis.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 28)
  def _reduce_18(val, _values)
     Italic.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 29)
  def _reduce_19(val, _values)
     Strike.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 31)
  def _reduce_20(val, _values)
                   @index[:footnote] ||= []
               @index[:footnote] << {:content => val[1] }
               Footnote.new([val[1], @index[:footnote].size])
               
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

# reduce 40 omitted

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

module_eval(<<'.,.,', 'rafinlineparser.ry', 67)
  def _reduce_47(val, _values)
     val.join 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 68)
  def _reduce_48(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 69)
  def _reduce_49(val, _values)
     Image.new(val[1]) 
  end
.,.,

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

module_eval(<<'.,.,', 'rafinlineparser.ry', 100)
  def _reduce_76(val, _values)
     val.join 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 101)
  def _reduce_77(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 104)
  def _reduce_78(val, _values)
                      base, text = val[1].split("|",2)
                  text ||= base
                  Ruby.new([base, text])
                
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 112)
  def _reduce_79(val, _values)
                 e = ERB.new("<%= #{val[1]} %>")
             Plain.new(e.result) 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 116)
  def _reduce_80(val, _values)
     Manuedo.new(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 121)
  def _reduce_81(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 122)
  def _reduce_82(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 123)
  def _reduce_83(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 124)
  def _reduce_84(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 125)
  def _reduce_85(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 127)
  def _reduce_86(val, _values)
     val.join 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 128)
  def _reduce_87(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 131)
  def _reduce_88(val, _values)
              label, title = val[1].split("|",2)
          title ||= label
          @index[:label] ||= []
          @index[:label] << {:title => title }
          Label.new([label.to_code, title, @index[:label].size])
          
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 140)
  def _reduce_89(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 141)
  def _reduce_90(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 142)
  def _reduce_91(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 143)
  def _reduce_92(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 144)
  def _reduce_93(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 146)
  def _reduce_94(val, _values)
     val.join 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 147)
  def _reduce_95(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 150)
  def _reduce_96(val, _values)
                      title, uri = val[1].split("|",2)
                  uri ||= title
                  uri = "#" + uri.to_code if uri.gsub(/^\s*https*:\/\//,"") == uri
                  Reference.new([title, uri])
                
  end
.,.,

# reduce 97 omitted

# reduce 98 omitted

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

# reduce 102 omitted

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'rafinlineparser.ry', 185)
  def _reduce_124(val, _values)
     val 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 187)
  def _reduce_125(val, _values)
      Verb.new(val[1])
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 191)
  def _reduce_126(val, _values)
     Plain.new(val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 192)
  def _reduce_127(val, _values)
      Plain.new([val[0].contents, val[1]]) 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 194)
  def _reduce_128(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 195)
  def _reduce_129(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 196)
  def _reduce_130(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 197)
  def _reduce_131(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'rafinlineparser.ry', 198)
  def _reduce_132(val, _values)
     val[0] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class InlineParser

  if __FILE__ == $0
    raf = InlineParser.new
    src = $stdin.readline
    nodes = raf.parse(src)
    puts "----- output -----"
    nodes.each do |n|
      puts n.apply
    end
  end
end # end of module Raf
